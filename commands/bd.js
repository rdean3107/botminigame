const { PermissionsBitField, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');

let gameActive = false; // Tr·∫°ng th√°i tr√≤ ch∆°i
let participants = new Map(); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch ng∆∞·ªùi tham gia m·ªói khi tr√≤ ch∆°i m·ªõi b·∫Øt ƒë·∫ßu

module.exports = {
    name: 'playgame',
    description: 'T·∫°o tr√≤ ch∆°i t√†i x·ªâu v·ªõi danh s√°ch ng∆∞·ªùi tham gia v√† ƒë·∫∑t c∆∞·ª£c.',
    execute: async (message) => {
        if (gameActive) {
            return message.reply('L·ªánh tham gia ƒëang ƒë∆∞·ª£c kh·ªüi t·∫°o, vui l√≤ng kh·ªüi t·∫°o l·∫°i khi l·ªánh tham gia k·∫øt th√∫c.');
        }

        if (!message.member.permissions.has(PermissionsBitField.Flags.ManageMessages)) {
            return message.reply('B·∫°n c·∫ßn quy·ªÅn qu·∫£n l√Ω tin nh·∫Øn ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.');
        }

        // ƒê√°nh d·∫•u tr√≤ ch∆°i b·∫Øt ƒë·∫ßu v√† thi·∫øt l·∫≠p l·∫°i danh s√°ch ng∆∞·ªùi tham gia
        gameActive = true;
        participants = new Map();  // ƒê·∫∑t l·∫°i danh s√°ch ng∆∞·ªùi tham gia khi b·∫Øt ƒë·∫ßu tr√≤ ch∆°i m·ªõi

        // C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi tham gia
        const updateParticipantEmbed = () => {
            const participantList = Array.from(participants.values())
                .map(({ username, choice, bet }) => `- <@${username}> ƒë√£ c∆∞·ª£c **${bet}** v√†o **${choice.toUpperCase()}**.`)
                .join('\n');

            return new EmbedBuilder()
                .setTitle('üéÆ Danh s√°ch ng∆∞·ªùi tham gia')
                .setDescription(participantList || 'Ch∆∞a c√≥ ai tham gia!')
                .setColor(0x00ff99)
                .setFooter({ text: `Ng∆∞·ªùi t·∫°o: ${message.author.tag}` })
                .setTimestamp();
        };

        const introEmbed = new EmbedBuilder()
            .setTitle('üéÆ Tham gia tr√≤ ch∆°i ngay!')
            .setDescription('Nh·∫•n v√†o n√∫t **Tham gia** b√™n d∆∞·ªõi ƒë·ªÉ tham gia tr√≤ ch∆°i v√† ƒë·∫∑t c∆∞·ª£c.')
            .setColor(0x00ff99)
            .setFooter({ text: `Ng∆∞·ªùi t·∫°o: ${message.author.tag}` })
            .setTimestamp();

        const joinButton = new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId('join_game')
                .setLabel('Tham gia')
                .setStyle(ButtonStyle.Primary),
        );

        const gameMessage = await message.channel.send({
            embeds: [introEmbed, updateParticipantEmbed()],
            components: [joinButton],
        });

        const countdownMessage = await message.channel.send("<a:emoji_57:1284871363034611742> Th·ªùi gian tham gia: 60s");

        let countdown = 60; // Th·ªùi gian ƒë·∫øm ng∆∞·ª£c b·∫Øt ƒë·∫ßu t·ª´ 60 gi√¢y

        // H√†m ƒë·ªÉ c·∫≠p nh·∫≠t th·ªùi gian ƒë·∫øm ng∆∞·ª£c
        const updateCountdown = setInterval(async () => {
            if (countdown === 0) {
                clearInterval(updateCountdown);
                // Sau khi h·∫øt th·ªùi gian, ch·ªâ c·∫≠p nh·∫≠t th√¥ng b√°o ƒë·∫øm ng∆∞·ª£c m√† kh√¥ng c·∫ßn th√¥ng b√°o k·∫øt th√∫c.
                await countdownMessage.edit("<a:emoji_57:1284871363034611742> Th·ªùi gian tham gia ƒë√£ k·∫øt th√∫c!");
                await gameMessage.edit({ components: [] }); // H·ªßy c√°c n√∫t khi h·∫øt th·ªùi gian
                gameActive = false; // ƒê·∫∑t l·∫°i tr·∫°ng th√°i tr√≤ ch∆°i sau khi k·∫øt th√∫c
            } else {
                await countdownMessage.edit(`<a:emoji_57:1284871363034611742> Th·ªùi gian tham gia: ${countdown}s`);
                countdown--;
            }
        }, 1000); // C·∫≠p nh·∫≠t m·ªói gi√¢y

        const collector = gameMessage.createMessageComponentCollector({ time: 60000 });

        collector.on('collect', async (interaction) => {
            if (!interaction.isButton() || interaction.customId !== 'join_game') return;

            const { user } = interaction;
            if (participants.has(user.id)) {
                return interaction.reply({ content: 'B·∫°n ƒë√£ tham gia tr√≤ ch∆°i r·ªìi!', ephemeral: true });
            }

            // Hi·ªÉn th·ªã Modal ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c
            const betModal = new ModalBuilder()
                .setCustomId('bet_modal')
                .setTitle('ƒê·∫∑t c∆∞·ª£c')
                .addComponents(
                    new ActionRowBuilder().addComponents(
                        new TextInputBuilder()
                            .setCustomId('bet_amount')
                            .setLabel('S·ªë ti·ªÅn c∆∞·ª£c')
                            .setStyle(TextInputStyle.Short)
                            .setRequired(true),
                    ),
                    new ActionRowBuilder().addComponents(
                        new TextInputBuilder()
                            .setCustomId('bet_choice')
                            .setLabel('Ch·ªçn T√†i, X·ªâu, Ch·∫µn, L·∫ª ho·∫∑c B·∫ßu, Cua...')
                            .setStyle(TextInputStyle.Short)
                            .setRequired(true),
                    ),
                );

            await interaction.showModal(betModal);
        });

        // L·∫Øng nghe c√°c Modal Submit
        message.client.on('interactionCreate', async (interaction) => {
            if (!interaction.isModalSubmit() || interaction.customId !== 'bet_modal') return;

            const { user } = interaction;
            const betAmount = interaction.fields.getTextInputValue('bet_amount');
            const betChoice = interaction.fields.getTextInputValue('bet_choice').trim().toLowerCase();

            // Ki·ªÉm tra l·ª±a ch·ªçn h·ª£p l·ªá
            const validChoices = ['t√†i', 'x·ªâu', 'ch·∫µn', 'l·∫ª', 'b·∫ßu', 'cua', 't√¥m', 'c√°', 'g√†', 'nai'];
            if (!validChoices.includes(betChoice)) {
                return interaction.reply({ content: 'L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. B·∫°n ch·ªâ c√≥ th·ªÉ ch·ªçn "T√†i", "X·ªâu", "Ch·∫µn", "L·∫ª", "B·∫ßu", "Cua", "T√¥m", "C√°", "G√†", "Nai".', ephemeral: true });
            }

            // Ki·ªÉm tra s·ªë ti·ªÅn c∆∞·ª£c h·ª£p l·ªá
            const parsedBet = parseInt(betAmount, 10);
            if (isNaN(parsedBet) || parsedBet <= 0) {
                return interaction.reply({ content: 'S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá!', ephemeral: true });
            }

            // L∆∞u ng∆∞·ªùi tham gia v√† ƒë·∫∑t c∆∞·ª£c
            participants.set(user.id, { username: user.id, bet: parsedBet, choice: betChoice });

            // C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi tham gia
            await gameMessage.edit({ embeds: [introEmbed, updateParticipantEmbed()] });

            // ƒê·∫£m b·∫£o ch·ªâ deferUpdate m·ªôt l·∫ßn v√† tr√°nh l·ªói Interaction ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
            if (!interaction.replied) {
                await interaction.deferUpdate();
            }
        });
    },
};
