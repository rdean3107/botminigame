const { PermissionsBitField, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');

let gameActive = false; // Tr·∫°ng th√°i tr√≤ ch∆°i
let participants = new Map(); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch ng∆∞·ªùi tham gia m·ªói khi tr√≤ ch∆°i m·ªõi b·∫Øt ƒë·∫ßu

const emojis = [
    '<a:1317knifeduck:1282378375045971988>',
    '<a:1030471081833812068ezgif:1313459874331492363>',
    '<a:2653kittypaw:1281794652630155326>',
    '<a:3064meongdrink:1289610165829763093>',
    '<a:3534_Dance_HK:1289625183199559793>',
    '<a:4221bobacat:1281774359299625095>',
    '<a:5473pianojump:1289610278144708649>',
    '<a:6026bunnycrazy:1289625218763063367>',
    '<a:6540hellokittybow:1289625220767809549>',
    '<a:emoji_54:1284871280570662952>',
    '<a:emoji_53:1284871154997137460>',
    '<a:meongfacetable70:1285599349241544830>',
    '<a:rgshybunnycute:1285599402425188432>',
    '<a:rose_bearsleep:1285599405965054056>',
];

// M·∫£ng c√°c m√†u pastel ƒë·∫≠m nh·∫°t
const pastelColors = [
   0xA1C6D7, // Pastel blue
    0x7A9BBA, // Light pastel blue
    0xA1D98C, // Pastel green
    0xFF7F8B, // Light pastel pink
    0xFF9A9A, // Light pastel red
    0xFFE16A, // Pastel yellow
];

const randomPastelColor = () => {
    return pastelColors[Math.floor(Math.random() * pastelColors.length)];
};

module.exports = {
    name: 'playgame',
    description: 'T·∫°o tr√≤ ch∆°i t√†i x·ªâu v·ªõi danh s√°ch ng∆∞·ªùi tham gia v√† ƒë·∫∑t c∆∞·ª£c.',
    execute: async (message) => {
        if (gameActive) {
            return message.reply('L·ªánh tham gia ƒëang ƒë∆∞·ª£c kh·ªüi t·∫°o, vui l√≤ng th·ª≠ l·∫°i sau khi k·∫øt th√∫c l·ªánh hi·ªán t·∫°i.');
        }

        if (!message.member.permissions.has(PermissionsBitField.Flags.ManageMessages)) {
            return message.reply('B·∫°n c·∫ßn quy·ªÅn qu·∫£n l√Ω tin nh·∫Øn ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.');
        }

        // ƒê√°nh d·∫•u tr√≤ ch∆°i b·∫Øt ƒë·∫ßu v√† thi·∫øt l·∫≠p l·∫°i danh s√°ch ng∆∞·ªùi tham gia
        gameActive = true;
        participants = new Map();  // ƒê·∫∑t l·∫°i danh s√°ch ng∆∞·ªùi tham gia khi b·∫Øt ƒë·∫ßu tr√≤ ch∆°i m·ªõi

        // C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi tham gia
        const updateParticipantEmbed = () => {
            const participantList = Array.from(participants.values())
                .map(({ username, choice, bet }) => `${emojis[Math.floor(Math.random() * emojis.length)]} <@${username}> c∆∞·ª£c **${bet}** v√†o **${choice.toUpperCase()}**.`)
                .join('\n');

            return new EmbedBuilder()
                .setTitle('üéÆ Danh s√°ch ng∆∞·ªùi tham gia')
                .setDescription(participantList || 'Ch∆∞a c√≥ ai tham gia! H√£y tham gia ngay n√†o!')
                .setColor(randomPastelColor())  // Random m√†u pastel cho embed
                .setFooter({ text: `Ng∆∞·ªùi t·∫°o: ${message.author.tag}` })
                .setTimestamp()
                .setThumbnail('https://cdn.discordapp.com/attachments/1284728005012361276/1314621830933381142/image.png?ex=6754707c&is=67531efc&hm=a45c0a4832a3f38dd27588b746c3fbf17a2b6a5486e104d87c3dd88eb5ad3c9f&')
        };

        // Embed gi·ªõi thi·ªáu tr√≤ ch∆°i v·ªõi ch√∫ th√≠ch v√† emoji ng·∫´u nhi√™n
        const introEmbed = new EmbedBuilder()
            .setTitle('üéÆ **Tham gia tr√≤ ch∆°i ngay!**')
            .setDescription(`${emojis[Math.floor(Math.random() * emojis.length)]} **B·∫•m v√†o n√∫t "Tham gia" d∆∞·ªõi ƒë√¢y** ƒë·ªÉ tham gia tr√≤ ch∆°i v√† ƒë·∫∑t c∆∞·ª£c ngay!\n\nCh√∫c b·∫°n may m·∫Øn!`)
            .setColor(randomPastelColor())  // Random m√†u pastel cho embed
            .setThumbnail(message.guild.iconURL())  // Thumbnail l√† avatar c·ªßa server
            .setFooter({ text: `Ng∆∞·ªùi t·∫°o: ${message.author.tag}` })
            .setTimestamp();

        const joinButton = new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId('join_game')
                .setLabel('Tham gia ngay!')
                .setStyle(ButtonStyle.Secondary)  // M√†u xanh l√° c√¢y
                .setEmoji('üéÆ')
        );

        const gameMessage = await message.channel.send({
            embeds: [introEmbed],
            components: [joinButton],
        });

        const countdownMessage = await message.channel.send("<a:emoji_57:1284871363034611742> **Th·ªùi gian tham gia**: 60s");

        let countdown = 60; // Th·ªùi gian ƒë·∫øm ng∆∞·ª£c b·∫Øt ƒë·∫ßu t·ª´ 60 gi√¢y

        // H√†m ƒë·ªÉ c·∫≠p nh·∫≠t th·ªùi gian ƒë·∫øm ng∆∞·ª£c
        const updateCountdown = setInterval(async () => {
            if (countdown === 0) {
                clearInterval(updateCountdown);
                // Sau khi h·∫øt th·ªùi gian, ch·ªâ c·∫≠p nh·∫≠t th√¥ng b√°o ƒë·∫øm ng∆∞·ª£c m√† kh√¥ng c·∫ßn th√¥ng b√°o k·∫øt th√∫c.
                await countdownMessage.edit("<a:emoji_57:1284871363034611742> **Th·ªùi gian tham gia ƒë√£ k·∫øt th√∫c!**");
                await gameMessage.edit({ components: [] }); // H·ªßy c√°c n√∫t khi h·∫øt th·ªùi gian
                gameActive = false; // ƒê·∫∑t l·∫°i tr·∫°ng th√°i tr√≤ ch∆°i sau khi k·∫øt th√∫c

                // X√≥a t·∫•t c·∫£ c√°c embed c≈©
                await gameMessage.delete();

                // T·∫°o m·ªôt tin nh·∫Øn m·ªõi ƒë·ªÉ ch·ªâ ch·ª©a danh s√°ch ng∆∞·ªùi tham gia
                await message.channel.send({ embeds: [updateParticipantEmbed()] });

            } else {
                await countdownMessage.edit(`<a:emoji_57:1284871363034611742> **Th·ªùi gian tham gia**: ${countdown}s`);
                countdown--;
            }
        }, 1000); // C·∫≠p nh·∫≠t m·ªói gi√¢y

        const collector = gameMessage.createMessageComponentCollector({ time: 60000 });

        collector.on('collect', async (interaction) => {
            if (!interaction.isButton() || interaction.customId !== 'join_game') return;

            const { user } = interaction;
            if (participants.has(user.id)) {
                const reply = await interaction.reply({ content: 'B·∫°n ƒë√£ tham gia tr√≤ ch∆°i r·ªìi!', ephemeral: true });

                // X√≥a tin nh·∫Øn sau 5 ƒë·∫øn 8 gi√¢y
                const randomTimeout = Math.floor(Math.random() * (8000 - 5000 + 1)) + 5000;  // T·ª´ 5000ms ƒë·∫øn 8000ms
                setTimeout(() => reply.delete(), randomTimeout);
                return;
            }

            // Y√™u c·∫ßu ng∆∞·ªùi ch∆°i nh·∫≠p th√¥ng tin c∆∞·ª£c
            const filter = (response) => response.author.id === user.id;
            const reply = await interaction.reply({
                content: 'üìù **Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c v√† lo·∫°i c∆∞·ª£c** (v√≠ d·ª•: "200 t√†i", "400 x·ªâu", "1000 b·∫ßu", "300 cua",...)',
                ephemeral: true,  // Tin nh·∫Øn s·∫Ω m·∫•t sau 5 ƒë·∫øn 8 gi√¢y
            });

            // X√≥a tin nh·∫Øn y√™u c·∫ßu nh·∫≠p c∆∞·ª£c sau 5 ƒë·∫øn 8 gi√¢y (kh√¥ng x√≥a th√¥ng b√°o l·ªói)
            const randomTimeout = Math.floor(Math.random() * (8000 - 5000 + 1)) + 5000;  // T·ª´ 5000ms ƒë·∫øn 8000ms
            setTimeout(() => reply.delete(), randomTimeout);

            let validBet = false;
            let betAmount, betChoice;

            // L·∫∑p l·∫°i qu√° tr√¨nh nh·∫≠p c∆∞·ª£c n·∫øu c∆∞·ª£c kh√¥ng h·ª£p l·ªá
            while (!validBet) {
                // Thu th·∫≠p c√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi ch∆°i
                const collected = await message.channel.awaitMessages({
                    filter,
                    max: 1,
                    time: 30000, // Th·ªùi gian ch·ªù 30 gi√¢y
                    errors: ['time'],
                });

                const betMessage = collected.first().content.trim().toLowerCase();
                const betParts = betMessage.split(' ');

                if (betParts.length !== 2) {
                    // Ch·ªâ hi·ªÉn th·ªã th√¥ng b√°o n√†y khi c√∫ ph√°p kh√¥ng ƒë√∫ng
                    const invalidReply = await interaction.followUp({ content: '‚ùå **ƒê·ªãnh d·∫°ng kh√¥ng ƒë√∫ng!**\nVui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p: "S·ªë ti·ªÅn c∆∞·ª£c Lo·∫°i c∆∞·ª£c" (v√≠ d·ª•: "200 t√†i").', ephemeral: true });
                    // Kh√¥ng x√≥a th√¥ng b√°o l·ªói ƒë·ªãnh d·∫°ng
                    continue;
                }

                betAmount = parseInt(betParts[0], 10);
                betChoice = betParts[1];

                // Ki·ªÉm tra s·ªë ti·ªÅn c∆∞·ª£c h·ª£p l·ªá
                if (isNaN(betAmount) || betAmount <= 0) {
                    const invalidBetReply = await interaction.followUp({ content: '‚ùå **S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá!**', ephemeral: true });
                    // Kh√¥ng x√≥a th√¥ng b√°o l·ªói s·ªë ti·ªÅn c∆∞·ª£c
                    continue;
                }

                // Ki·ªÉm tra lo·∫°i c∆∞·ª£c h·ª£p l·ªá
                const validChoices = ['t√†i', 'x·ªâu', 'l·∫ª', 'ch·∫µn', 'b·∫ßu', 'cua', 't√¥m', 'c√°', 'g√†', 'nai'];
                if (!validChoices.includes(betChoice)) {
                    const invalidChoiceReply = await interaction.followUp({ content: '‚ùå **L·ª±a ch·ªçn c∆∞·ª£c kh√¥ng h·ª£p l·ªá!**\nVui l√≤ng ch·ªçn m·ªôt trong c√°c lo·∫°i: t√†i, x·ªâu, l·∫ª, ch·∫µn, b·∫ßu, cua, t√¥m, c√°, g√†, nai.', ephemeral: true });
                    // Kh√¥ng x√≥a th√¥ng b√°o l·ªói l·ª±a ch·ªçn c∆∞·ª£c
                    continue;
                }

                // N·∫øu t·∫•t c·∫£ h·ª£p l·ªá, tho√°t kh·ªèi v√≤ng l·∫∑p
                validBet = true;

                // L∆∞u ng∆∞·ªùi tham gia v√† c∆∞·ª£c
                participants.set(user.id, { username: user.id, bet: betAmount, choice: betChoice });

                // C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi tham gia
                await gameMessage.edit({ embeds: [introEmbed, updateParticipantEmbed()] });

                // X√≥a tin nh·∫Øn nh·∫≠p c∆∞·ª£c sau khi x·ª≠ l√Ω xong
                await collected.first().delete();
            }
        });
    },
};
