const { PermissionsBitField, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require("discord.js");

// Danh s√°ch to√†n c·∫ßu l∆∞u tr·ªØ ng∆∞·ªùi tham gia
let globalParticipants = new Map();

// C√°c emoji ƒë∆∞·ª£c s·ª≠ d·ª•ng trong tr√≤ ch∆°i
const emojis = [
    "<a:1317knifeduck:1282378375045971988>", "<a:1030471081833812068ezgif:1313459874331492363>",
    "<a:2653kittypaw:1281794652630155326>", "<a:3064meongdrink:1289610165829763093>", "<a:3534_Dance_HK:1289625183199559793>",
    "<a:4221bobacat:1281774359299625095>", "<a:5473pianojump:1289610278144708649>", "<a:6026bunnycrazy:1289625218763063367>",
    "<a:6540hellokittybow:1289625220767809549>", "<a:emoji_54:1284871280570662952>", "<a:emoji_53:1284871154997137460>",
    "<a:meongfacetable70:1285599349241544830>", "<a:rgshybunnycute:1285599402425188432>", "<a:rose_bearsleep:1285599405965054056>"
];

// M·∫£ng m√†u pastel ng·∫´u nhi√™n d√πng ƒë·ªÉ t·∫°o m√†u cho embed
const pastelColors = [ 0xff7f8b];
const randomPastelColor = () => pastelColors[Math.floor(Math.random() * pastelColors.length)];

// C√°c quy t·∫Øc t√≠nh to√°n k·∫øt qu·∫£ c·ªßa c√°c c∆∞·ª£c
const outcomeRules = {
    "t√†i l·∫ª": { "t√†i l·∫ª": 1, "x·ªâu ch·∫µn": -1, "t√†i ch·∫µn": 0, "x·ªâu l·∫ª": 0},
    "t√†i ch·∫µn": { "t√†i ch·∫µn": 1, "x·ªâu l·∫ª": -1, "t√†i l·∫ª": 0, "x·ªâu ch·∫µn":0},
    "x·ªâu l·∫ª": { "x·ªâu l·∫ª": 1, "t√†i ch·∫µn": -1, "t√†i l·∫ª": 0, "x·ªâu ch·∫µn ": 0 },
    "x·ªâu ch·∫µn": { "x·ªâu ch·∫µn": 1, "t√†i l·∫ª": -1, "x·ªâu l·∫ª": 0, "t√†i ch·∫µn": 0 },
    t√†i: { t√†i: 1, "t√†i l·∫ª": 1, "t√†i ch·∫µn": 1, x·ªâu: -1, "x·ªâu l·∫ª": -1, "x·ªâu ch·∫µn": -1 },
    x·ªâu: { x·ªâu: 1, "x·ªâu l·∫ª": 1, "x·ªâu ch·∫µn": 1, t√†i: -1, "t√†i l·∫ª": -1, "t√†i ch·∫µn": -1 },
    l·∫ª: { l·∫ª: 1, "t√†i l·∫ª": 1, "t√†i ch·∫µn": -1, ch·∫µn: -1, "x·ªâu l·∫ª": 1, "x·ªâu ch·∫µn": -1 },
    ch·∫µn: { ch·∫µn: 1, "x·ªâu l·∫ª": -1, "x·ªâu ch·∫µn": 1, l·∫ª: -1, "t√†i l·∫ª": -1, "t√†i ch·∫µn": 1 },
    b·∫ßu: { b·∫ßu: 1, cua: -1, t√¥m: -1, c√°: -1, g√†: -1, nai: -1 },
    cua: { cua: 1, b·∫ßu: -1, t√¥m: -1, c√°: -1, g√†: -1, nai: -1 },
    t√¥m: { t√¥m: 1, b·∫ßu: -1, cua: -1, c√°: -1, g√†: -1, nai: -1 },
    c√°: { c√°: 1, b·∫ßu: -1, cua: -1, t√¥m: -1, g√†: -1, nai: -1 },
    g√†: { g√†: 1, b·∫ßu: -1, cua: -1, t√¥m: -1, c√°: -1, nai: -1 },
    nai: { nai: 1, b·∫ßu: -1, cua: -1, t√¥m: -1, c√°: -1, g√†: -1 },
};

module.exports = {
    name: "playgame",
    description: "T·∫°o tr√≤ ch∆°i t√†i x·ªâu v·ªõi danh s√°ch ng∆∞·ªùi tham gia v√† ƒë·∫∑t c∆∞·ª£c.",
    execute: async (message) => {
        // Ki·ªÉm tra quy·ªÅn c·ªßa ng∆∞·ªùi s·ª≠ d·ª•ng
        if (!message.member.permissions.has(PermissionsBitField.Flags.ManageMessages)) {
            return message.reply({ content: "B·∫°n c·∫ßn quy·ªÅn qu·∫£n l√Ω tin nh·∫Øn ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.", ephemeral: true });
        }

        // Bi·∫øn tr·∫°ng th√°i tr√≤ ch∆°i
        let gameActive = true; // Tr√≤ ch∆°i b·∫Øt ƒë·∫ßu, m·∫∑c ƒë·ªãnh l√† ƒëang ch∆°i
        let participants = globalParticipants.size > 0 ? globalParticipants : new Map();

        // H√†m c·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi tham gia
        const updateParticipantEmbed = () => {
            const participantList = Array.from(participants.values()).map(
                ({ username, balance, choice = "", bet = 0 }) =>
                    `${emojis[Math.floor(Math.random() * emojis.length)]} <@${username}> - S·ªë d∆∞: **${balance}** - C∆∞·ª£c: **${bet}** v√†o **${choice.toUpperCase() || "Ch∆∞a ch·ªçn"}**`
            ).join("\n");

            return new EmbedBuilder()
                .setTitle("üéÆ Danh s√°ch ng∆∞·ªùi ch∆°i")
                .setDescription(participantList || "Ch∆∞a c√≥ ai tham gia! H√£y tham gia ngay n√†o!")
                .setColor(randomPastelColor())
                .setFooter({ text: `Ng∆∞·ªùi t·∫°o: ${message.author.tag}` })
                .setTimestamp();
        };

        // G·ª≠i l·ªùi m·ªùi tham gia tr√≤ ch∆°i
        const introEmbed = new EmbedBuilder()
            .setTitle("üéÆ **Tham gia tr√≤ ch∆°i ngay!**")
            .setDescription(
                `${emojis[Math.floor(Math.random() * emojis.length)]} **B·∫•m v√†o n√∫t "Tham gia" d∆∞·ªõi ƒë√¢y** ƒë·ªÉ tham gia tr√≤ ch∆°i v√† ƒë·∫∑t c∆∞·ª£c ngay!\n\n**C√°c lo·∫°i c∆∞·ª£c c√≥ s·∫µn**:\n\n- T√†i X·ªâu: **T√†i** ho·∫∑c **X·ªâu**\n- T√†i X·ªâu Ch·∫µn L·∫ª: **T√†i Ch·∫µn**, **T√†i L·∫ª**, **X·ªâu Ch·∫µn**, **X·ªâu L·∫ª**\n- B·∫ßu Cua T√¥m C√° G√† Nai: **B·∫ßu**, **Cua**, **T√¥m**, **C√°**, **G√†**, **Nai**\n\nCh√∫c b·∫°n may m·∫Øn!`,
            )
            .setColor(randomPastelColor())
            .setFooter({ text: `Ng∆∞·ªùi t·∫°o: ${message.author.tag}` })
            .setTimestamp();

        // T·∫°o c√°c n√∫t b·∫•m ƒë·ªÉ tham gia tr√≤ ch∆°i ho·∫∑c k·∫øt th√∫c tr√≤ ch∆°i
        const actionRow = new ActionRowBuilder().addComponents(
            new ButtonBuilder().setCustomId("join_game").setLabel("Tham gia ngay!").setStyle(ButtonStyle.Secondary).setEmoji("<a:7087pinkpandawave:1289625225130020936>"),
            new ButtonBuilder().setCustomId("end_game").setLabel("K·∫øt th√∫c").setStyle(ButtonStyle.Secondary).setEmoji("<a:rgshybunnycute:1285599402425188432>"),
            new ButtonBuilder().setCustomId("set_balance").setLabel("Set S·ªë D∆∞").setStyle(ButtonStyle.Secondary).setEmoji("<:money:1315658278688129084>") // N√∫t Set S·ªë D∆∞
        );

        // G·ª≠i th√¥ng b√°o m·ªùi tham gia tr√≤ ch∆°i
        let gameMessage = await message.channel.send({ embeds: [introEmbed], components: [actionRow] });

        const collector = gameMessage.createMessageComponentCollector({ time: 0 });

        // X·ª≠ l√Ω khi c√≥ ng∆∞·ªùi tham gia ho·∫∑c k·∫øt th√∫c tr√≤ ch∆°i
        collector.on("collect", async (interaction) => {
            const { user } = interaction;
        
            if (interaction.customId === "join_game") {
                if (!gameActive) {
                    return interaction.reply({ content: "Tr√≤ ch∆°i ƒë√£ k·∫øt th√∫c. Kh√¥ng th·ªÉ tham gia n·ªØa.", ephemeral: true });
                }
        
                if (!participants.has(user.id)) {
                    participants.set(user.id, { username: user.id, balance: 0, choice: "", bet: 0 });
                }
        
                // C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi ch∆°i
                await gameMessage.edit({ embeds: [introEmbed, updateParticipantEmbed()], components: [actionRow] });
        
                const joinMessage = await interaction.reply({
                    content: 'B·∫°n ƒë√£ tham gia tr√≤ ch∆°i! Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c v√† lo·∫°i c∆∞·ª£c (v√≠ d·ª•: "300 t√†i", "1000 x·ªâu", "500 t√†i ch·∫µn", "200 b·∫ßu", "100 cua").',
                    ephemeral: true,
                });
        
                setTimeout(() => joinMessage.delete().catch(() => {}), 10000);
        
                // L·ªçc v√† x·ª≠ l√Ω th√¥ng tin c∆∞·ª£c c·ªßa ng∆∞·ªùi ch∆°i
                const filter = (response) => response.author.id === user.id && response.content.match(/^\d+\s+(t√†i|x·ªâu|l·∫ª|ch·∫µn|t√†i\s+ch·∫µn|t√†i\s+l·∫ª|x·ªâu\s+ch·∫µn|x·ªâu\s+l·∫ª|b·∫ßu|cua|t√¥m|c√°|g√†|nai)$/i);
                const collectorMessage = message.channel.createMessageCollector({ filter, time: 20000 }); // 20s ƒë·ªÉ nh·∫≠p c∆∞·ª£c
        
                collectorMessage.on("collect", (betMessage) => {
                    const [betAmount, ...choiceParts] = betMessage.content.split(" ");
                    const choice = choiceParts.join(" ").toLowerCase();
                    const player = participants.get(user.id);
        
                    // C·∫≠p nh·∫≠t l·ª±a ch·ªçn v√† s·ªë ti·ªÅn c∆∞·ª£c c·ªßa ng∆∞·ªùi ch∆°i
                    player.choice = choice;
                    player.bet = parseInt(betAmount, 10);
        
                    gameMessage.edit({ embeds: [introEmbed, updateParticipantEmbed()], components: [actionRow] });
        
                    betMessage.reply({ content: "C∆∞·ª£c c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n!", ephemeral: true }).then((response) => {
                        setTimeout(() => response.delete().catch(() => {}), 3000);
                    });
        
                    collectorMessage.stop();
                });
        
                collectorMessage.on("end", (collected, reason) => {
                    if (reason === "time") {
                        // N·∫øu h·∫øt th·ªùi gian m√† kh√¥ng c√≥ c∆∞·ª£c
                        interaction.followUp({
                            content: "B·∫°n ƒë√£ h·∫øt th·ªùi gian ƒë·ªÉ nh·∫≠p c∆∞·ª£c. Kh√¥ng c√≥ c∆∞·ª£c ƒë∆∞·ª£c ghi nh·∫≠n.",
                            ephemeral: true,
                        });
                    }
                });
            }
        
            if (interaction.customId === "end_game") {
                if (interaction.user.id !== message.author.id) {
                    return interaction.reply({ content: "Ch·ªâ ng∆∞·ªùi t·∫°o tr√≤ ch∆°i m·ªõi c√≥ quy·ªÅn k·∫øt th√∫c tr√≤ ch∆°i!", ephemeral: true });
                }

                // ƒê·∫∑t gameActive th√†nh false khi k·∫øt th√∫c tr√≤ ch∆°i
                gameActive = false;

                const resultMessage = await interaction.reply({
                    content: "Vui l√≤ng nh·∫≠p k·∫øt qu·∫£ cu·ªëi c√πng (v√≠ d·ª•: t√†i, x·ªâu, t√†i ch·∫µn, b·∫ßu, cua, t√¥m).",
                    ephemeral: true,
                });

                setTimeout(() => resultMessage.delete().catch(() => {}), 5000);

                // L·ªçc k·∫øt qu·∫£ v√† t√≠nh to√°n s·ªë d∆∞ c·ªßa ng∆∞·ªùi ch∆°i
                const filter = (response) =>
                    response.author.id === interaction.user.id && response.content.match(/^(t√†i|x·ªâu|l·∫ª|ch·∫µn|t√†i\s+ch·∫µn|t√†i\s+l·∫ª|x·ªâu\s+ch·∫µn|x·ªâu\s+l·∫ª|b·∫ßu|cua|t√¥m|c√°|g√†|nai)$/i);

                const resultCollector = message.channel.createMessageCollector({ filter, max: 1 });

                resultCollector.on("collect", async (resultMessage) => {
                    const winningChoice = resultMessage.content.toLowerCase();
                
                    // C·∫≠p nh·∫≠t s·ªë d∆∞ ng∆∞·ªùi ch∆°i theo k·∫øt qu·∫£
                    participants.forEach((data) => {
                        const { bet, choice } = data;
                        const result = outcomeRules[choice] ? outcomeRules[choice][winningChoice] : 0;
                
                        if (result === 1) data.balance += bet;
                        if (result === -1) data.balance -= bet;
                
                        data.choice = "";
                        data.bet = 0;
                    });
                
                    globalParticipants = participants;
                
                    // G·ª≠i k·∫øt qu·∫£ tr√≤ ch∆°i
                    await message.channel.send({
                        embeds: [
                            new EmbedBuilder()
                                .setTitle("üéÆ K·∫øt qu·∫£ tr√≤ ch∆°i")
                                .setDescription(`<a:rgshybunnycute:1285599402425188432> ***K·∫øt qu·∫£:*** **${winningChoice.toUpperCase()}**`)
                                .setColor(randomPastelColor())
                                .addFields({ name: "Ng∆∞·ªùi ch∆°i", value: updateParticipantEmbed().data.description })
                                .setTimestamp(),
                        ],
                    });
                    // X√≥a n√∫t b·∫•m sau khi k·∫øt th√∫c tr√≤ ch∆°i
                    gameMessage.edit({ components: [] });
                });
    
            }
        
            if (interaction.customId === "set_balance") {
                if (user.id !== message.author.id) {
                    return interaction.reply({ content: "Ch·ªâ ng∆∞·ªùi t·∫°o tr√≤ ch∆°i m·ªõi c√≥ th·ªÉ thay ƒë·ªïi s·ªë d∆∞!", ephemeral: true });
                }
        
                const filter = (response) => response.author.id === user.id && response.content.match(/^<@!?(\d+)> \d+$/);
                await interaction.reply({ content: 'Vui l√≤ng tag ng∆∞·ªùi ch∆°i v√† nh·∫≠p s·ªë d∆∞ m·ªõi c·ªßa h·ªç (v√≠ d·ª•: <@1234567890> 1000)', ephemeral: true })
    .then((msg) => {
        setTimeout(() => {
            msg.delete().catch(() => {}); // X√≥a tin nh·∫Øn sau 5 gi√¢y
        }, 5000);
    });

        
                const collectorMessage = message.channel.createMessageCollector({ filter, time: 30000 });
        
                collectorMessage.on("collect", (msg) => {
                    const [, taggedUserId, newBalance] = msg.content.match(/^<@!?(\d+)> (\d+)$/);
                    const player = participants.get(taggedUserId); // L·∫•y ng∆∞·ªùi ch∆°i theo ID
        
                    if (player) {
                        player.balance = parseInt(newBalance, 10); // C·∫≠p nh·∫≠t s·ªë d∆∞
                        msg.reply(`S·ªë d∆∞ c·ªßa <@${taggedUserId}> ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh **${newBalance}**`);
                        gameMessage.edit({ embeds: [introEmbed, updateParticipantEmbed()], components: [actionRow] }); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch ng∆∞·ªùi ch∆°i
                    } else {
                        msg.reply(`Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi ch∆°i v·ªõi ID <@${taggedUserId}>`);
                    }
        
                    collectorMessage.stop();
                });
        
                collectorMessage.on("end", (collected, reason) => {
                    if (reason === "time") {
                        interaction.followUp({ content: "B·∫°n ƒë√£ h·∫øt th·ªùi gian ƒë·ªÉ thay ƒë·ªïi s·ªë d∆∞.", ephemeral: true });
                    }
                });
            }
        });
        
    },
};
